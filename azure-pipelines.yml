trigger:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '4a3fbf3b-1d0a-4414-ba43-950d988d3017'
  imageRepository: 'renattsweighttrackerks'
  containerRegistry: 'weighttrackeracr.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'weighttrackeracr18651e12-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: CI
  jobs:
  - job: Build
    displayName: Build
    pool:
      name: weighttracker-pool
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: CD
  dependsOn: Build
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: Deploy
    displayName: Deploy
    variables:
    - group: Environment variables
    pool:
      name: weighttracker-pool
      vmImage: $(vmImageName)
    environment: 'renattsWeightTrackerK8S.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: Kubernetes@1
            displayName: Create configMap
            inputs:
             connectionType: 'Kubernetes Service Connection'
             kubernetesServiceEndpoint: 'k8s'
             command: 'create'
             secretType: 'dockerRegistry'
             containerRegistryType: 'Azure Container Registry'
             configMapName: 'weighttracker-cm'
             configMapArguments: |
               --from-literal=HOST=$(HOST) --from-literal=NODE_ENV=$(NODE_ENV) --from-literal=OKTA_ORG_URL=$(OKTA_ORG_URL) --from-literal=PG_PORT=$(PG_PORT) --from-literal=PORT=$(PORT) 
         
          - task: KubernetesManifest@0
            displayName: Create secrets
            inputs:
              action: 'createSecret'
              kubernetesServiceConnection: 'k8s'
              secretType: 'generic'
              secretName: 'secrets'
              secretArguments: |
                --from-literal=COOKIE_ENCRYPT_PWD=$(COOKIE_ENCRYPT_PWD) --from-literal=HOST=$(HOST) --from-literal=NODE_ENV=$(NODE_ENV) --from-literal=HOST_URL=$(HOST_URL) --from-literal=OKTA_CLIENT_ID=$(OKTA_CLIENT_ID) --from-literal=OKTA_CLIENT_SECRET=$(OKTA_CLIENT_SECRET) --from-literal=OKTA_ORG_URL=$(OKTA_ORG_URL) --from-literal=PG_DATABASE=$(PG_DATABASE) --from-literal=PG_HOST=$(PG_HOST) --from-literal=PG_PASSWORD=$(PG_PASSWORD) --from-literal=PG_PORT=$(PG_PORT) --from-literal=PG_USERNAME=$(PG_USERNAME) --from-literal=PORT=$(PORT) 
                
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

